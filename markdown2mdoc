#!/usr/bin/python

import mistune
import os
import sys
import re
import datetime
import subprocess
import tempfile

from docopt import docopt

__all__ = ['markdown2mdoc']
__version__ = '0.1.0'

from pygments import highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter


'''
----- block level
block_code(code, language=None)
block_quote(text)
block_html(html)
header(text, level, raw=None)
hrule()
list(body, ordered=True)
list_item(text)
paragraph(text)
table(header, body)
table_row(content)
table_cell(content, **flags)
----- span level
strikethrough(self, text):
autolink(link, is_email=False)
codespan(text)
double_emphasis(text)
emphasis(text)
image(src, title, alt_text)
linebreak()
newline()
link(link, title, content)
tag(html)
strikethrough(text)
text(text)

footnote_ref(self, key, index):
footnote_item(self, key, text):
footnotes(self, text):
'''
class MD2MDocRenderer(mistune.Renderer):
    def escape(self,string):
        #replace dots at teh beginning of a line with \&.
        string = re.sub("^\.",'\&.',string,re.MULTILINE)
        return string

    def block_code(self, code, lang):
        return '\n.Bd -literal -offset ident\n%s\n.Ed\n' % self.escape(code)
       
    def block_quote(self,text):
        return self.block_code("``"+text+"``",None)

    def block_html(self,html): #ignore it
        return ""

    def hrule(self):
        return "\n--------------------------------\n"

    def paragraph(self, text):
        return '\n.Pp\n%s\n' % \
                self.escape(text)

    def codespan(self,text):
        return block_code(self,text,None) #maybe not good?

    def header(self,text, level, raw=None):
        return "\n\n.Sh "+text.upper()+"\n.Pp\n\&\n"

    def double_emphasis(self,text): #FIXME: no difference to emphasis
        return "\n.Bf -symbolic\n"+text+"\n.Ef\n"

    def emphasis(self,text):
        return "\n.Bf -emphasis\n"+text+"\n.Ef\n"

    def strikethrough(self, text):
        b = False
        s = ''
        for c in text:
            b = not b
            if c == ' ':
                c = ''
            if b:
                s += c+'-'
            else:
                s += c+'-'
        s = s[:-1]
        return s

    def linebreak(self):
        return '\n'

    def list(self,body, ordered=True):
        if ordered:
            return "\n.Bl -enum\n"+body+"\n.El\n"
        else:
            return "\n.Bl -bullet\n"+body+"\n.El\n"

    def list_item(self,text):
        return "\n.It\n"+text+"\n"+"\n"

    def link(self,link, title, content):
        if len(content) > 0:
            return content+" "+str(link)+""
        else:
            return ""+str(link)+""

    def autolink(self,link, is_email=False):
        if is_email:
            return "<"+str(link)+">"
        else:
            return ""+str(link)+""

renderer = MD2MDocRenderer()
md = mistune.Markdown(renderer=renderer)

doc = '''
usage: markdown2mdoc ( -i FILE | --stdin ) [-o FILE] [options]
       markdown2mdoc --version

Use the help message of a command to create a manpage.

Options:
  -h, --help                   show this help message and exit
  -o FILE, --output FILE       write to file instead of stdout.
                               when FILE is set to "auto" the    
                               format is: command.section(.gz)
  -i FILE, --input FILE        read CLI-help input from file    
  --stdin                      read CLI-help input from stdin   
  --no-document                when you render just a small part
                               of a manpage you may not want
                               the document start as part
                               of the rendering
  --name NAME                  name
  --description TEXT           description
  -s NUM, --section NUM        section number for manual page
  --volume VOLUME              volume title for manual page
  --os OS                      operating system
  -m, --open-in-man            open the output in man
  -v, --version                display version information

'''


opt = docopt(doc,None,True,__version__)

inp = ''
if opt['--input']:
    inp = "".join(open(opt['--input']).readlines())
elif opt['--stdin']:
    inp = "".join(sys.stdin.readlines())
else:
    print "No input. Existing."
    exit(0)


rendered = md.render(inp)

now = datetime.datetime.now()
def mdoc_init_str():
    global opt
    s = ".Dd $Mdocdate: "+now.strftime("%B")+" "+now.strftime("%a")+" "+str(now.day)+" "+str(now.year)+" $\n"
    s += ".Dt "
    if opt["--name"]:
        s+= opt["--name"].upper()
    else:
        s+= "NONAME"
    s+=" "
    if opt["--section"]:
        s+=opt["--section"]
    else:
        s+="1"
    if opt["--volume"]:
        s+=" "+opt["--volume"]
    s+="\n"
    s + ".Os "
    if opt["--os"]:
        s+=opt["--os"]
    else:
        s+="UNIX"
    s+="\n"
    return s


if opt['--output']:
    f = open(opt['--output'],'w+')
    f.write(mdoc_init_str())
    f.write(rendered)
    f.close()
else:
    print rendered


if opt['--open-in-man']:
    if not opt['--output']:
        f = tempfile.NamedTemporaryFile(delete=False)
        f.write(mdoc_init_str())
        f.write(rendered)
        f.close()
        subprocess.call('man '+f.name,shell=True)
        os.unlink(f.name)
    else:
        subprocess.call('man ./'+opt['--output'],shell=True)

